// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mydata.proto

#include "mydata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ming {
constexpr mydata::mydata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num1_(0)
  , num2_(0)
  , res_(0){}
struct mydataDefaultTypeInternal {
  constexpr mydataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mydataDefaultTypeInternal() {}
  union {
    mydata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mydataDefaultTypeInternal _mydata_default_instance_;
}  // namespace ming
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mydata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mydata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mydata_2eproto = nullptr;

const uint32_t TableStruct_mydata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ming::mydata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ming::mydata, num1_),
  PROTOBUF_FIELD_OFFSET(::ming::mydata, num2_),
  PROTOBUF_FIELD_OFFSET(::ming::mydata, res_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ming::mydata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ming::_mydata_default_instance_),
};

const char descriptor_table_protodef_mydata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014mydata.proto\022\004ming\"1\n\006mydata\022\014\n\004num1\030\001"
  " \001(\005\022\014\n\004num2\030\002 \001(\005\022\013\n\003res\030\003 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mydata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mydata_2eproto = {
  false, false, 79, descriptor_table_protodef_mydata_2eproto, "mydata.proto", 
  &descriptor_table_mydata_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mydata_2eproto::offsets,
  file_level_metadata_mydata_2eproto, file_level_enum_descriptors_mydata_2eproto, file_level_service_descriptors_mydata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mydata_2eproto_getter() {
  return &descriptor_table_mydata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mydata_2eproto(&descriptor_table_mydata_2eproto);
namespace ming {

// ===================================================================

class mydata::_Internal {
 public:
};

mydata::mydata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ming.mydata)
}
mydata::mydata(const mydata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num1_, &from.num1_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&num1_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:ming.mydata)
}

inline void mydata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&num1_)) + sizeof(res_));
}

mydata::~mydata() {
  // @@protoc_insertion_point(destructor:ming.mydata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mydata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mydata::ArenaDtor(void* object) {
  mydata* _this = reinterpret_cast< mydata* >(object);
  (void)_this;
}
void mydata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mydata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mydata::Clear() {
// @@protoc_insertion_point(message_clear_start:ming.mydata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&num1_)) + sizeof(res_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mydata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mydata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ming.mydata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num1 = 1;
  if (this->_internal_num1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num1(), target);
  }

  // int32 num2 = 2;
  if (this->_internal_num2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num2(), target);
  }

  // double res = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res = this->_internal_res();
  uint64_t raw_res;
  memcpy(&raw_res, &tmp_res, sizeof(tmp_res));
  if (raw_res != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ming.mydata)
  return target;
}

size_t mydata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ming.mydata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num1 = 1;
  if (this->_internal_num1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num1());
  }

  // int32 num2 = 2;
  if (this->_internal_num2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num2());
  }

  // double res = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res = this->_internal_res();
  uint64_t raw_res;
  memcpy(&raw_res, &tmp_res, sizeof(tmp_res));
  if (raw_res != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mydata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mydata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mydata::GetClassData() const { return &_class_data_; }

void mydata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mydata *>(to)->MergeFrom(
      static_cast<const mydata &>(from));
}


void mydata::MergeFrom(const mydata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ming.mydata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num1() != 0) {
    _internal_set_num1(from._internal_num1());
  }
  if (from._internal_num2() != 0) {
    _internal_set_num2(from._internal_num2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_res = from._internal_res();
  uint64_t raw_res;
  memcpy(&raw_res, &tmp_res, sizeof(tmp_res));
  if (raw_res != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mydata::CopyFrom(const mydata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ming.mydata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mydata::IsInitialized() const {
  return true;
}

void mydata::InternalSwap(mydata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mydata, res_)
      + sizeof(mydata::res_)
      - PROTOBUF_FIELD_OFFSET(mydata, num1_)>(
          reinterpret_cast<char*>(&num1_),
          reinterpret_cast<char*>(&other->num1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mydata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mydata_2eproto_getter, &descriptor_table_mydata_2eproto_once,
      file_level_metadata_mydata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ming
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ming::mydata* Arena::CreateMaybeMessage< ::ming::mydata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ming::mydata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
